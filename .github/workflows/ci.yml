name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y unixodbc-dev gcc
    
    - name: Install Python dependencies
      run: |
        cd App
        pip install -r requirements.txt
        pip install pytest flake8 mypy
    
    - name: Lint code
      run: |
        flake8 App/agent.py --max-line-length=120 --ignore=E501,W503,E203
        flake8 scripts/ --max-line-length=120 --ignore=E501,W503,E203
        flake8 tests/ --max-line-length=120 --ignore=E501,W503,E203
    
    - name: Type check
      run: |
        mypy App/agent.py --ignore-missing-imports --no-strict-optional
    
    - name: Run tests
      run: |
        cd App
        python -m pytest ../tests/ -v --tb=short
    
    - name: Test Docker build
      run: |
        cd App
        docker build -t azure-rag-agent:test .
        docker run --rm azure-rag-agent:test python -c "import agent; print('Import successful')"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Azure Container Registry
      if: github.event_name == 'push'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build and push Docker image
      if: github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: ./App
        push: true
        tags: |
          ${{ secrets.ACR_LOGIN_SERVER }}/azure-rag-agent:latest
          ${{ secrets.ACR_LOGIN_SERVER }}/azure-rag-agent:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Container Apps
      run: |
        az containerapp update \
          --name rag-agent \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/azure-rag-agent:${{ github.sha }}
    
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get the endpoint
        ENDPOINT=$(az containerapp show --name rag-agent --resource-group ${{ secrets.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
        
        # Test health endpoint
        curl -f "https://$ENDPOINT/health" || exit 1
        
        # Test query endpoint (basic smoke test)
        curl -f -X POST "https://$ENDPOINT/query" \
          -H "Content-Type: application/json" \
          -d '{"query": "test", "tenant_id": "smoke-test"}' || exit 1
